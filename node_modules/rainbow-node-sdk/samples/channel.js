const util = require('util');

var NodeSDK = require("../index.js");

var nodeSDK = new NodeSDK({
    "rainbow": {
        "host": "sandbox.openrainbow.com",
        "mode": "xmpp"
    },
    "credentials": {
        "login": "",
        "password": ""
    },
    application: {
        "appID": "",
        "appSecret": ""
    },
    logs: {
        enableConsoleLogs: true,
        enableFileLogs: false,
        file: {
            path: "/var/tmp/rainbowsdk/",
            level: "debug"
        }
    },
    im: {
        sendReadReceipt: false  //false to not send a read receipt automatically
    }
});

nodeSDK.events.on("rainbow_onstarted", (jsonMessage) => {
    console.log("[Rainbow] >>> STARTED", jsonMessage);
    console.log("[Rainbow] >>> STATE", nodeSDK.state);
});

nodeSDK.events.on("rainbow_onready", (jsonMessage) => {
    console.log("[Rainbow] >>> READY", jsonMessage);
    console.log("[Rainbow] >>> STATE", nodeSDK.state);

   /*
    nodeSDK.channels.createPrivateChannel("Channel_4" , "CHannel_6").then((channel) => {
        console.log("[Rainbow] >>> CHANNEL CREATED", channel);

        let contact = nodeSDK.contacts.getAll()[1];
        console.log("[Rainbow] >>> Contact", contact);

        
        nodeSDK.channels.addMembersToChannel(channel, [contact]).then((channelUpdated) => {
            console.log("[Rainbow] >>> Updated channel", channelUpdated);

            nodeSDK.channels.publishMessageToChannel(channelUpdated, "a message", "a title", "https://hub.openrainbow.com", {"data": "aCustomData", "data2":{"subdata": "12345", "subdata2": false }}).then((message) => {
                console.log("[Rainbow] >>> Message", message);
            }).catch((err) => {
                console.log("[Rainbow] >>> Message Err", err);
            });

        }).catch((err) => {
            console.log("[Rainbow] >>> Err", err);
        });
    });
    */
    

    console.log("[Rainbow] >>> ALL Channels", util.inspect(nodeSDK.channels.getAllChannels()));

    console.log(util.inspect(util));

    //let channel = nodeSDK.channels.getAllChannels()[0];

    

    //console.log("[Rainbow] >>> OWNED Channels", nodeSDK.channels.getAllOwnedChannel());

    /*
    nodeSDK.channels.createChannel("Channel Policemens", "Cops information").then((channel) => {
        console.log("[Rainbow] >>> Channel created", channel);
    });
    */

    /*
    nodeSDK.channels.getChannelById("5a28055911add39362f8fffb", true).then((publicChannel) => {
        console.log("[Rainbow] >>> CHANNEL Found", publicChannel);

        nodeSDK.channels.subscribeToChannel(publicChannel).then((channelUpdated) => {
            console.log("[Rainbow] >>> CHANNEL Found", channelUpdated);
        }).catch((err) => {
            console.log("[Rainbow] >>> CHANNEL Subscribe err", err);    
        });

        /*
        nodeSDK.channels.addMembersToChannel(channel, [contact]).then((channelUpdated) => {
            console.log("[Rainbow] >>> Updated channel", channelUpdated);
        }).catch((err) => {
            console.log("[Rainbow] >>> Err", err);
        });
    }).catch((err) => {
        console.log("[Rainbow] >>> CHANNEL GET Err", err);
    });
    */

    //console.log("[Rainbow] >>> SUBS Channels", nodeSDK.channels.getAllSubscribedChannel());
/*
nodeSDK.channels.findChannelsByTopic("Public").then(channels => {
    console.log("[Rainbow] >>> Channels found", channels); 
});
*/

/*
nodeSDK.channels.findChannelsByName("Public").then(channels => {
    console.log("[Rainbow] >>> Channels found", channels); 
});
*/


    /*
    nodeSDK.channels.getChannelById("5a09bc7cb1a9a5aed64ac3be", true).then((privateNode) => {

        let options = {
//            limit: 100,
            "onlyPublishers": true
        };

        nodeSDK.channels.getUsersFromChannel(privateNode, options).then((users) => {
            console.log("[Rainbow] >>> USERS", users);
        });
    });
    */
    

    /*
    nodeSDK.channels.getChannelById("5a0c93ddd86d9e02fa7ac209", true).then((privateNode) => {
        nodeSDK.channels.publishMessageToChannel(privateNode, "a message", "a title", "https://hub.openrainbow.com", {"data": "aCustomData", "data2":{"subdata": "12345", "subdata2": false }}).then((message) => {
            console.log("[Rainbow] >>> Message", message);
        }).catch((err) => {
            console.log("[Rainbow] >>> Message Err", err);
        });

    });
    */

    /*
    nodeSDK.channels.findChannel("Privatos").then((list) => {
        console.log("[Rainbow] >>> FOUND", list);
    });
    */
    /*
    let channel = channels[0];
    console.log("[Rainbow] >>> Channel", channel);

    let contact = nodeSDK.contacts.getAll()[1];
    console.log("[Rainbow] >>> Contact", contact);

    */

    /*
    nodeSDK.channels.getChannelById("5a0aaf0e6ff034fc3badf593", true).then((privateNode) => {
        console.log("[Rainbow] >>> ChannelById", privateNode);

        nodeSDK.channels.publishMessageToChannel(privateNode, "a message", "a title", "https://hub.openrainbow.com", {"data": "aCustomData", "data2":{"subdata": "12345", "subdata2": false }}).then((message) => {
            console.log("[Rainbow] >>> Message", message);
        }).catch((err) => {
            console.log("[Rainbow] >>> Message Err", err);
        });
    });

    */
    
  
  /*
    nodeSDK.channels.createPrivateChannel("PrivateNew", "Last private channel created").then((channelCreated) => {
        console.log("[Rainbow] >>> CHANNEL CREATED", channelCreated);

        nodeSDK.channels.addMembersToChannel(channelCreated, [contact]).then((channelUpdated) => {
            console.log("[Rainbow] >>> Updated channel", channelUpdated);
        }).catch((err) => {
            console.log("[Rainbow] >>> Err", err);
        });
    });
    */

    /*
    nodeSDK.channels.publishMessageToChannel(privateNode, "a message", "a title", "https://hub.openrainbow.com", {"data": "aCustomData", "data2":{"subdata": "12345", "subdata2": false }}).then((message) => {
        console.log("[Rainbow] >>> Message", message);
    }).catch((err) => {
        console.log("[Rainbow] >>> Message Err", err);
    });
    */
});
    
console.log("[Rainbow] >>> STATE", nodeSDK.state);
nodeSDK.start();


